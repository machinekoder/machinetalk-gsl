.###  This whole script runs in template mode.
.#
.template 1
.gsl from "scripts/prepare_fsm.gsl"
.gsl from "scripts/prepare_msg.gsl"
.gsl from "scripts/prepare_socket.gsl"
.path = "generated/python/$(project:c)/$(class.module:Pascal,lower)"
.output path + "/$(class.name:Pascal,lower).py"
# coding=utf-8
.for socket where (!defined(socket.class))
.  if !defined(imported)
import zmq
import threading
import uuid
from google.protobuf.message import DecodeError
.  endif
.  imported = 1
.endfor
from fysom import Fysom
.for socket where (defined(socket.class))
from ..$(module:Pascal,lower).$(socket.class:Pascal,lower) import $(socket.class:lower,Pascal)
.endfor

import $(class.project:c).protobuf.types_pb2 as pb
from $(class.project:c).protobuf.message_pb2 import Container


class $(class.name:lower,Pascal)(object):
    def __init__(self, debuglevel=0, debugname='$(class.name:)'):
        self.debuglevel = debuglevel
        self.debugname = debugname
        self._error_string = ''
        self.on_error_string_changed = []
.
.for socket where (!defined(socket.class))
        # ZeroMQ
        context = zmq.Context()
        context.linger = 0
        self._context = context
        # pipe to signalize a shutdown
        self._shutdown = context.socket(zmq.PUSH)
        self._shutdown_uri = b'inproc://shutdown-%s' % str(uuid.uuid4()).encode()
        self._shutdown.bind(self._shutdown_uri)
.  if (count(outgoing) > 0)
        # pipe for outgoing messages
        self._pipe = context.socket(zmq.PUSH)
        self._pipe_uri = b'inproc://pipe-%s' % str(uuid.uuid4()).encode()
        self._pipe.bind(self._pipe_uri)
.  endif
        self._thread = None  # socket worker tread
        self._tx_lock = threading.Lock()  # lock for outgoing messages
.endfor
.
.for socket

        # $(Name)
.  if defined(socket.class)
        self._$(name)_channel = $(socket.class:lower,Pascal)(debuglevel=debuglevel)
        self._$(name)_channel.debugname = '%s - %s' % (self.debugname, '$(name:)')
.    if (count(state) > 0)
        self._$(name)_channel.on_state_changed.append(self._$(name)_channel_state_changed)
.    endif
.    if (count(incoming) > 0)
        self._$(name)_channel.on_socket_message_received.append(self._$(name)_channel_message_received)
.    endif
.  else
        self.$(name)_uri = ''
.    if (nature = "server")
        self._$(name)_port = 0
        self._$(name)_port_event = threading.Event()  # sync event for port
        self._$(name)_dsn = ''
        self._$(name)_dsn_event = threading.Event()  # sync event for dsn
.    endif
.    if ((type = "SUB") | (type = "XPUB"))
        self._$(name)_topics = set()
.    endif
.  endif
        # more efficient to reuse protobuf messages
.  if (count(incoming) > 0)
        self._$(name)_rx = Container()
.  endif
.  if (count(outgoing) > 0)
        self._$(name)_tx = Container()
.  endif
.endfor
.
.for timer

        # $(Name)
        self._$(name)_lock = threading.Lock()
        self._$(name)_interval = $(interval)
        self._$(name)_timer = None
        self._$(name)_active = False
.  if (defined(liveness))
        self._$(name)_liveness = 0
        self._$(name)_reset_liveness = $(liveness)
.  endif
.endfor

        # callbacks
.for socket
.  if (count(incoming) > 0)
        self.on_$(name)_message_received = []
.  endif
.endfor
        self.on_state_changed = []

.for fsm
        # fsm
        self._fsm = Fysom(
            {'initial': '$(initial:c)',
             'events': [
.  for state
.    for event
                 {'name': '$(name:c)', 'src': '$(state.name:c)', 'dst': '$(next:c)'},
.    endfor
.  endfor
             ]}
        )

.  for state
        self._fsm.on$(name:c) = self._on_fsm_$(name:c)
.    for event
.-     make sure we assign only once
.      if (!defined(on_$(name:c)))
.        on_$(name:c) = 1
        self._fsm.onafter$(name:c) = self._on_fsm_$(name:c)
.      endif
.    endfor
.-   exit
.    for exit
        self._fsm.onleave$(state.name:c) = self._on_fsm_$(state.name:c)_exit
.    endfor
.  endfor
.  for state

    def _on_fsm_$(name:c)(self, _):
.-   entry
.    for entry
        if self.debuglevel > 0:
            print('[%s]: state $(state.NAME) entry' % self.debugname)
.      for action
        self.$(name:c)()
.      endfor
.    endfor
        if self.debuglevel > 0:
            print('[%s]: state $(NAME)' % self.debugname)
        for cb in self.on_state_changed:
            cb('$(name:c)')
        return True
.    for event
.-     make sure we assign only once
.      if (!defined(fsm_on_$(name:c)))
.        fsm_on_$(name:c) = 1

    def _on_fsm_$(name:c)(self, _):
        if self.debuglevel > 0:
            print('[%s]: event $(NAME)' % self.debugname)
.      for action
        self.$(name:c)()
.      endfor
        return True
.      endif
.    endfor
.-   exit
.    for exit

    def _on_fsm_$(state.name:c)_exit(self, _):
        if self.debuglevel > 0:
            print('[%s]: state $(state.NAME) exit' % self.debugname)
.      for action
        self.$(name:c)()
.      endfor
        return True
.    endfor
.  endfor
.endfor
.

    @property
    def error_string(self):
        return self._error_string

    @error_string.setter
    def error_string(self, string):
        if self._error_string is string:
            return
        self._error_string = string
        for cb in self.on_error_string_changed:
            cb(string)
.for socket where (!defined(socket.class) & (nature = "server"))

    @property
    def $(name)_port(self):
        self._$(name)_port_event.wait()
        return self._$(name)_port

    @property
    def $(name)_dsn(self):
        self._$(name)_dsn_event.wait()
        return self._$(name)_dsn
.endfor
.
.for socket where (defined(socket.class))

    @property
    def $(name)_uri(self):
        return self._$(name)_channel.socket_uri

    @$(name)_uri.setter
    def $(name)_uri(self, value):
        self._$(name)_channel.socket_uri = value
.
.  if (defined(nature) & (nature = "server"))

    @property
    def $(name)_port(self):
        return self._$(name)_channel.socket_port

    @property
    def $(name)_dsn(self):
        return self._$(name)_channel.socket_dsn
.  endif
.endfor
.
.for slot

    def $(name:c)(self):
        print('WARNING: slot $(name) unimplemented')
.endfor
.
.for trigger

    def $(name:c)(self):
.  ifprefix = ""
.  for event
        $(ifprefix)if self._fsm.isstate('$(when:c)'):
            self._fsm.$(name:c)()
.    ifprefix = "el"
.  endfor
.endfor
.
.for socket
.  if ((type = "SUB") | (type = "XPUB"))

    def add_$(name)_topic(self, name):
.    if defined(socket.class)
        self._$(name)_channel.add_socket_topic(name)
.    else
        self._$(name)_topics.add(name)
.    endif

    def remove_$(name)_topic(self, name):
.    if defined(socket.class)
        self._$(name)_channel.remove_socket_topic(name)
.    else
        self._$(name)_topics.remove(name)
.    endif

    def clear_$(name)_topics(self):
.    if defined(socket.class)
        self._$(name)_channel.clear_socket_topics()
.    else
        self._$(name)_topics.clear()
.    endif
.  endif
.
.  if !defined(socket.class)

    def _socket_worker(self, context, uri):
        poll = zmq.Poller()
        socket = context.socket(zmq.$(TYPE))
        socket.setsockopt(zmq.LINGER, 0)
.    if (nature = "client")
        socket.connect(uri)
.    else
        if ('ipc://' in uri) or ('inproc://' in uri):
            socket.bind(uri)
        else:
            self._$(name)_port = socket.bind_to_random_port(uri)
            self._$(name)_port_event.set()  # set sync for port
        self._$(name)_dsn =socket.get_string(zmq.LAST_ENDPOINT, encoding='utf-8')
        self._$(name)_dsn_event.set()
.    endif
.
.    if (count(incoming) > 0)
        poll.register(socket, zmq.POLLIN)
.    endif
.
.    if (type = "SUB")
        # subscribe is always connected to socket creation
        for topic in self._$(name)_topics:
            socket.setsockopt(zmq.SUBSCRIBE, topic.encode())
.    elsif (type = "XPUB")
        socket.setsockopt(zmq.XPUB_VERBOSE, 1)  # enable verbose subscription messages
.    endif

        shutdown = context.socket(zmq.PULL)
        shutdown.connect(self._shutdown_uri)
        poll.register(shutdown, zmq.POLLIN)
.    if (count(outgoing) > 0)
        pipe = context.socket(zmq.PULL)
        pipe.connect(self._pipe_uri)
        poll.register(pipe, zmq.POLLIN)
.    endif

        while True:
            s = dict(poll.poll())
            if shutdown in s:
                shutdown.recv()
                return  # shutdown signal
.    if (count(outgoing) > 0)
            if pipe in s:
.      if ((type = "XPUB") | (type = "ROUTER"))
                socket.send_multipart(pipe.recv_multipart(), zmq.NOBLOCK)
.      else
                socket.send(pipe.recv(), zmq.NOBLOCK)
.      endif
.    endif
.
.    if (count(incoming) > 0)
            if socket in s:
                self._socket_message_received(socket)
.    endif

    def start_socket(self):
        self._thread = threading.Thread(target=self._socket_worker,
                                        args=(self._context, self.$(name)_uri,))
        self._thread.start()

    def stop_socket(self):
        self._shutdown.send(b' ')  # trigger socket thread shutdown
        self._thread = None
.    if (nature = "server")
        self._$(name)_port_event.clear()  # clear sync for port
.    endif
.
.  endif
.endfor
.
.for socket where (defined(socket.class))

    def start_$(name)_channel(self):
        self._$(name)_channel.start()

    def stop_$(name)_channel(self):
        self._$(name)_channel.stop()
.endfor
.
.for timer

    def _$(name)_timer_tick(self):
        with self._$(name)_lock:
            self._$(name)_timer = None  # timer is dead on tick

        if self.debuglevel > 0:
            print('[%s] $(name) timer tick' % self.debugname)
.
.  if (defined(liveness))

        self._$(name)_liveness -= 1
        if self._$(name)_liveness == 0:
.    for timeout
.      ifprefix = ""
.      for event
            $(ifprefix)if self._fsm.isstate('$(when:c)'):
                self._fsm.$(name:c)()
.        ifprefix = "el"
.      endfor
.    endfor
            return
.  endif

.  for tick
.    ifprefix = ""
.    for event
        $(ifprefix)if self._fsm.isstate('$(when:c)'):
            self._fsm.$(name:c)()
.      ifprefix = "el"
.    endfor
.  endfor

.  if (defined(liveness))
    def reset_$(name)_liveness(self):
        self._$(name)_liveness = self._$(name)_reset_liveness
.  endif

    def reset_$(name)_timer(self):
        if not self._$(name)_active:
            return

        self._$(name)_lock.acquire()
        if self._$(name)_timer:
            self._$(name)_timer.cancel()
            self._$(name)_timer = None

        if self._$(name)_interval > 0:
            self._$(name)_timer = threading.Timer(
                self._$(name)_interval / 1000.0,
                self._$(name)_timer_tick
            )
            self._$(name)_timer.start()
        self._$(name)_lock.release()
        if self.debuglevel > 0:
            print('[%s] $(name) timer reset' % self.debugname)

    def start_$(name)_timer(self):
        self._$(name)_active = True
        self.reset_$(name)_timer()

    def stop_$(name)_timer(self):
        self._$(name)_active = False
        self._$(name)_lock.acquire()
        if self._$(name)_timer:
            self._$(name)_timer.cancel()
            self._$(name)_timer = None
        self._$(name)_lock.release()
.endfor
.
.for socket where (count(incoming) > 0)

    # process all messages received on $(name:)
.  if defined(socket.class)
.    if ((type = "SUB") | (type = "ROUTER"))
    def _$(name)_channel_message_received(self, identity, rx):
.    else
    def _$(name)_channel_message_received(self, rx):
.    endif
.  else
    def _socket_message_received(self, socket):
.    if (type = "SUB")
        (identity, msg) = socket.recv_multipart()  # identity is topic
.    elsif (type = "ROUTER")
        frames = socket.recv_multipart()
        identity = frames[:-1]
        msg = frames[-1]
.    else
        msg = socket.recv()
.    endif
.
.    if (type <> "XPUB")

        try:
            self._$(name)_rx.ParseFromString(msg)
        except DecodeError as e:
            note = 'Protobuf Decode Error: ' + str(e)
            print(note)  # TODO: decode error
            return

        if self.debuglevel > 0:
            print('[%s] received message' % self.debugname)
            if self.debuglevel > 1:
                print(self._$(name)_rx)
        rx = self._$(name)_rx
.    else
        rx = msg
.    endif
.  endif
.
.  ifprefix = ""
.  for incoming
.    if (defined(ignore) | (count(event) > 0) | defined(public))

.      if (name <> "*")
.        ws = "    "
        # react to $(name) message
        $(ifprefix)if rx.type == pb.$(class.msg_prefix + " " + name:upper,c):
.        ifprefix = "el"
.      else
.        ws = ""
        # react to any incoming message
.      endif
.
.      for response
        $(ws)self.send_$(name:c)()
.      endfor
.
.      for pparams
        $(ws)if rx.HasField('pparams'):
            $(ws)interval = rx.pparams.keepalive_timer
            $(ws)self._heartbeat_interval = interval
.      endfor
.
.      for note
        $(ws)# update error string with note
        $(ws)self.error_string = ''
        $(ws)for note in rx.note:
            $(ws)self.error_string += note + '\\n'
.      endfor
.
.      ifprefix2 = ""
.      for event
        $(ws)$(ifprefix2)if self._fsm.isstate('$(when:c)'):
            $(ws)self._fsm.$(name:c)()
.        ifprefix2 = "el"
.      endfor
.
.      if (defined(public) & public = "true")
.        if ((socket.type = "SUB") | (socket.type = "ROUTER"))
        $(ws)self.$(name:c)_received(identity, rx)
.        else
        $(ws)self.$(name:c)_received(rx)
.        endif
.      endif
.
.      if (defined(ignore) & ignore = "true")
        $(ws)return  # $(incoming.name:) is uninteresting
.      endif
.    endif
.  endfor

        for cb in self.on_$(name)_message_received:
.  if ((type = "SUB") | (type = "ROUTER"))
            cb(identity, rx)
.  else
            cb(rx)
.  endif
.
.
.  for incoming where (defined(public) & (public = "true"))

.    if ((socket.type = "SUB") | (socket.type = "ROUTER"))
    def $(name:c)_received(self, identity, rx):
.    else
    def $(name:c)_received(self, rx):
.    endif
        print('SLOT $(name:) unimplemented')
.  endfor
.
.endfor
.
.for socket where (count(outgoing) > 0)

.  if ((type = "XPUB") | (type = "ROUTER"))
    def send_$(name)_message(self, identity, msg_type, tx):
.  else
    def send_$(name)_message(self, msg_type, tx):
.  endif
.  if defined(socket.class)
.    if ((type = "XPUB") | (type = "ROUTER"))
        self._$(name)_channel.send_socket_message(identity, msg_type, tx)
.    else
        self._$(name)_channel.send_socket_message(msg_type, tx)
.    endif
.  else
        with self._tx_lock:
            tx.type = msg_type
            if self.debuglevel > 0:
                print('[%s] sending message: %s' % (self.debugname, msg_type))
                if self.debuglevel > 1:
                    print(str(tx))

.    if (type = "XPUB")
            self._pipe.send_multipart([identity, tx.SerializeToString()])
.    elsif (type = "ROUTER")
            self._pipe.send_multipart(identity + [tx.SerializeToString()])
.    else
            self._pipe.send(tx.SerializeToString())
.    endif
            tx.Clear()
.  endif
.
.  ifprefix = ""
.  for outgoing where ((count(event) > 0))

.    if (name <> "*")
.      ws = "    "
        $(ifprefix)if msg_type == pb.$(class.msg_prefix + " " + name:upper,c):
.    else
.      ws = ""
.    endif
.
.    ifprefix2 = ""
.    for event
        $(ws)$(ifprefix2)if self._fsm.isstate('$(when:c)'):
            $(ws)self._fsm.$(name:c)()
.      ifprefix2 = "el"
.    endfor
.    ifprefix = "el"
.  endfor
.endfor
.
.- create functions for each outgoing message
.for socket
.  for outgoing where (name <> "*")

.    if ((socket.type = "XPUB") | (type = "ROUTER"))
.      if defined(public)
    def send_$(name:c)(self, identity, tx):
        ids = [identity]
.      else
    def send_$(name:c)(self):
        tx = self._$(socket.name)_tx
        ids = self._$(socket.name)_topics
.      endif
.-     add protocol parameters
.      for pparams
        pparams = tx.pparams
        pparams.keepalive_timer = self._heartbeat_interval
.      endfor
        for receiver in ids:
            self.send_$(socket.name)_message(receiver, pb.$(class.msg_prefix + " " + name:upper,c), tx)
.    else
.      if defined(public)
    def send_$(name:c)(self, tx):
.      else
    def send_$(name:c)(self):
        tx = self._$(socket.name)_tx
.      endif
        self.send_$(socket.name)_message(pb.$(class.msg_prefix + " " + name:upper,c), tx)
.    endif
.  endfor
.endfor
.
.- react on channel state changes
.for socket where (defined(socket.class) & (count(state) > 0))

    def _$(name)_channel_state_changed(self, state):
.  ifprefix = ""
.  for state where (count(event) > 0)

        $(ifprefix)if state == '$(name:c)':
.     ifprefix2 = ""
.     for event
            $(ifprefix2)if self._fsm.isstate('$(when:c)'):
                self._fsm.$(name:c)()
.       ifprefix2 = "el"
.     endfor
.    ifprefix = "el"
.  endfor
.endfor
.
.endtemplate
